"use strict";(self.webpackChunkrohitdhill_me=self.webpackChunkrohitdhill_me||[]).push([[479],{4137:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=u(n),m=i,g=d["".concat(l,".").concat(m)]||d[m]||s[m]||a;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1580:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return u},assets:function(){return p},toc:function(){return s},default:function(){return m}});var r=n(7462),i=n(3366),a=(n(7294),n(4137)),o=["components"],c={title:"Execution of interpreted/ intermediate languages",id:"interediate-interpreted-execution",pagination_label:"Understand the process of how execution of intermediate/ interpreted programs takes place",sidebar_label:"Execution of interpreted and intermediate languages"},l=void 0,u={unversionedId:"programming/Program Execution/interediate-interpreted-execution",id:"programming/Program Execution/interediate-interpreted-execution",title:"Execution of interpreted/ intermediate languages",description:"Understand the process of how execution of intermediate/ interpreted programs takes place",source:"@site/docs/programming/02. Program Execution/02. Execution of interpreted and intermediate languages.md",sourceDirName:"programming/02. Program Execution",slug:"/programming/Program Execution/interediate-interpreted-execution",permalink:"/docs/programming/Program Execution/interediate-interpreted-execution",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Execution of interpreted/ intermediate languages",id:"interediate-interpreted-execution",pagination_label:"Understand the process of how execution of intermediate/ interpreted programs takes place",sidebar_label:"Execution of interpreted and intermediate languages"},sidebar:"tutorialSidebar",previous:{title:"Understand the process of compilation and how such programs get executed",permalink:"/docs/programming/Program Execution/execution-compile"},next:{title:"Understanding Intermediate Representation",permalink:"/docs/programming/Intermediate-Representation"}},p={},s=[{value:"Execution of interpreted languages",id:"execution-of-interpreted-languages",level:2},{value:"Execution of intermediate languages",id:"execution-of-intermediate-languages",level:2}],d={toc:s};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Understand the process of how execution of intermediate/ interpreted programs takes place")),(0,a.kt)("h2",{id:"execution-of-interpreted-languages"},"Execution of interpreted languages"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The interpreter acts as a software simulation of a machine whose fetch-decode-execute deals with high level language program statements rather than machine instructions viz. the interpreter takes in instructions in the high level language, and execute them on their behalf."),(0,a.kt)("li",{parentName:"ul"},"The whole code is not compiled into machine instructions all at once, but is rather read by an interpreter line-by-line, decoded, and the interpreter execute the code on our behalf, it\u2019s got specific instruction for everything already (an instruction:machineCode mapping)"),(0,a.kt)("li",{parentName:"ul"},"No need for knowledge about the target machine, since an interpreter executes the code, and it makes it very easy to write cross-platform applications since the interpreter will handle all the low level intricacies."),(0,a.kt)("li",{parentName:"ul"},"There are disadvantages too, such as slower execution time, decoding a statement every time its executed, larger space requirements"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Example"),": Ruby, Lisp, Powershell, Shell etc.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u2502  Source program  \u2502\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u2502\n     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u2502   Interpreter    \u2502\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u2502\n     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u2502     Output       \u2502\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,a.kt)("h2",{id:"execution-of-intermediate-languages"},"Execution of intermediate languages"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A program written in such language is compiled into an intermediate form known as its Bytecode, which is done to decouple away the language from the execution environment"),(0,a.kt)("li",{parentName:"ul"},"Once the bytecode is generated which is platform dependent (native to the virtual machine), it can either be:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Interpreted"),": VM can convert the bytecode into platform specific operations, and thus we get speed (no line by line decoding), and debugging capabilities (because it\u2019s interpreted)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"JIT compiled"),": The bytecode is taken, and is compiled into its machine code equivalent (not AOT, but as and when a certain functionality is needed)"))),(0,a.kt)("li",{parentName:"ul"},"Sometimes, we may get an option for both compilation and interpretation. The interpretation is for the testing phase, and after a bug-free stage is reached, the programs are compiled to increase their execution speed.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502 Source program \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502 Preprocessing  \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n              \u2502\n      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2502 Lexical analysis  \u2502\n      \u2502 Syntax analysis   \u2502\n      \u2502 Semantic analysis \u2502\n      \u2502 Intermediate code \u2502\n      \u2502    generation     \u2502\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n              \u2502\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u250c\u2500\u2524 Intermediate code\u251c\u2500\u2500\u2500\u2510\n     \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n     \u2502                        \u2502\n\u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Interpreter\u2502         \u2502 JIT compiler\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")))}m.isMDXComponent=!0}}]);