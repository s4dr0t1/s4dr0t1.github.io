"use strict";(self.webpackChunkrohitdhill_me=self.webpackChunkrohitdhill_me||[]).push([[108],{4137:function(e,t,a){a.d(t,{Zo:function(){return h},kt:function(){return m}});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},h=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,i=e.originalType,p=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),c=l(a),m=s,g=c["".concat(p,".").concat(m)]||c[m]||u[m]||i;return a?n.createElement(g,r(r({ref:t},h),{},{components:a})):n.createElement(g,r({ref:t},h))}));function m(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=a.length,r=new Array(i);r[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:s,r[1]=o;for(var l=2;l<i;l++)r[l]=a[l];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},8990:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return l},assets:function(){return h},toc:function(){return u},default:function(){return m}});var n=a(7462),s=a(3366),i=(a(7294),a(4137)),r=["components"],o={title:"Cryptographic Hashing",id:"hashing",pagination_label:"Learn more about cryptographic hashing",sidebar_label:"Cryptographic Hashing"},p=void 0,l={unversionedId:"cryptography/Cryptosystems/hashing",id:"cryptography/Cryptosystems/hashing",title:"Cryptographic Hashing",description:"A basic post about Hashing, and its role in ensuring integrity of data.",source:"@site/docs/cryptography/2. Cryptosystems/3. Cryptographic Hashing.md",sourceDirName:"cryptography/2. Cryptosystems",slug:"/cryptography/Cryptosystems/hashing",permalink:"/docs/cryptography/Cryptosystems/hashing",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Cryptographic Hashing",id:"hashing",pagination_label:"Learn more about cryptographic hashing",sidebar_label:"Cryptographic Hashing"},sidebar:"tutorialSidebar",previous:{title:"Learn more about asymmetric cryptography",permalink:"/docs/cryptography/Cryptosystems/asymmetric"},next:{title:"Learn more about digital signatures",permalink:"/docs/cryptography/Applications/digital_signature"}},h={},u=[{value:"Basics",id:"basics",level:2},{value:"Message Integrity",id:"message-integrity",level:2},{value:"Cryptographic Collision",id:"cryptographic-collision",level:2},{value:"Collision in Hashing - What, How and Why?",id:"collision-in-hashing---what-how-and-why",level:3},{value:"Understanding it better",id:"understanding-it-better",level:3}],c={toc:u};function m(e){var t=e.components,o=(0,s.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"A basic post about Hashing, and its role in ensuring integrity of data.")),(0,i.kt)("h2",{id:"basics"},"Basics"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Hashing",src:a(2914).Z,width:"2310",height:"255"})),(0,i.kt)("p",null,"A ",(0,i.kt)("strong",{parentName:"p"},"Hashing Algorithm")," is a mathematical function which takes in any sort of input of any arbitrary length and converts it into a fixed-size strings of characters viz. It's a mathematical function which operates on an input (which can be of any size) and generates an arbitrary output, which is unique, and of fixed size."),(0,i.kt)("p",null,"It's an irreversible process, and there's no way we can find out the original length of the input data, let alone find the input data itself."),(0,i.kt)("p",null,"The output is known as ",(0,i.kt)("strong",{parentName:"p"},"Digest"),", ",(0,i.kt)("strong",{parentName:"p"},"Message-Digest"),", or simply a ",(0,i.kt)("strong",{parentName:"p"},"Hash"),", it's unique in nature (or well it's supposed to be)."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"message-integrity"},"Message Integrity"),(0,i.kt)("p",null,"After applying the hashing functions on an input file, the hash generated is always unique. This can be used to make sure if our file hasn't been altered."),(0,i.kt)("p",null,"A sender has to send an important file to his buddy over an insecure network, and he must also make sure his file has not been tampered with, and for this purpose he utilise Hashing Functions, and calculates hash of the file. And send them both over, his friend upon receiving it, calculates the hash of the file and cross checks if both the hashes obtained are same or not, and in this way, be able to know if the file has been tampered with, or not."),(0,i.kt)("p",null,"This technique too, however has some sort of risk associated, the possibility of attacker modifying both the hash along with the file? There are other technologies too, to deal with this."),(0,i.kt)("p",null,"This graphic can be used to sum the process up perfectly."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Ensuring message integrity",src:a(6223).Z,width:"2000",height:"1659"})),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"cryptographic-collision"},"Cryptographic Collision"),(0,i.kt)("h3",{id:"collision-in-hashing---what-how-and-why"},"Collision in Hashing - What, How and Why?"),(0,i.kt)("p",null,"We already know that for every input, there is an output if we pass the input through a hashing function (such as SHA-512 will always produce a 512-bit message digest no matter the length of the input is)."),(0,i.kt)("p",null,"Taking this example of SHA-512 further, since the output is 512-bits, we can visualise the output is composed of 512-placeholders, each being able to hold either a 0 or a 1 (because it's binary). Due to the 512-placeholders fact, the total number of possible outputs is constained to ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("msup",{parentName:"mrow"},(0,i.kt)("mn",{parentName:"msup"},"2"),(0,i.kt)("mn",{parentName:"msup"},"512"))),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"2^{512}")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8141079999999999em",verticalAlign:"0em"}}),(0,i.kt)("span",{parentName:"span",className:"mord"},(0,i.kt)("span",{parentName:"span",className:"mord"},"2"),(0,i.kt)("span",{parentName:"span",className:"msupsub"},(0,i.kt)("span",{parentName:"span",className:"vlist-t"},(0,i.kt)("span",{parentName:"span",className:"vlist-r"},(0,i.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141079999999999em"}},(0,i.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,i.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,i.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,i.kt)("span",{parentName:"span",className:"mord mtight"},(0,i.kt)("span",{parentName:"span",className:"mord mtight"},"5"),(0,i.kt)("span",{parentName:"span",className:"mord mtight"},"1"),(0,i.kt)("span",{parentName:"span",className:"mord mtight"},"2")))))))))))))," only"),(0,i.kt)("p",null,"If every input must produce an output, and the number of inputs is always greater than the total number of possible outputs, a time will come when two different inputs will produce the same output because there is just no other option available, due to the limited availability of outputs. This is known as ",(0,i.kt)("strong",{parentName:"p"},"Cryptographic Collision")),(0,i.kt)("h3",{id:"understanding-it-better"},"Understanding it better"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The hash generated is supposed to be unique. Cryptographic Collision is a phenomenon when that is not true, and as a result, two different inputs produce the same hash"),(0,i.kt)("li",{parentName:"ul"},"If the total number of possible outputs depends on the size of the hash produced, one can say that the larger the size of hash produced, the more possible hashes, and consequently, less probability of Collision to take place. This is why we should always pick up algorithms which generate hashes with good sizes so that the probabilit of collision is less."),(0,i.kt)("li",{parentName:"ul"},"Cryptographic Collisions are a huge security risk, why? You'll come to understand it in later sections of this wiki (or whatever you call it). Even though it's a big risk, it's still acceptable because:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"They are very unpredictable and it's very tough to find obtained"),(0,i.kt)("li",{parentName:"ul"},"We can't really do anything about them. The only thing in our hands is using strong hashing algorithms which produce hashes of large sizes")))))}m.isMDXComponent=!0},2914:function(e,t,a){t.Z=a.p+"assets/images/hash-4cc93e01d6587b9c003ffd17b4ad8593.png"},6223:function(e,t,a){t.Z=a.p+"assets/images/integrity-37a5a28829b1787b858351d6629be170.png"}}]);